// shlurd:  a limited understanding of small worlds
// Copyright 2017-2018 John V. Sichi
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

verbmod :=
  // "in the morning"
  PP |
  // "swiftly and efficiently"
  ADVP;

// DPP is a label we magically synthesize for PP's with a single child
// (representing dangling prepositions)
verbmodFinal :=
  (verbmod) (DPP) |
  DPP;

plainS :=
  // "go"
  VP |
  // "he goes"
  (verbmod)* NP VP;

sentenceListElem :=
 S COMMA;

S ->
  plainS |
  //  "I am rubber and you are glue"
  S CC S |
  // "I am rubber, and you are glue"
  // "I am rubber, you are glue, and it bounces off me"
  (sentenceListElem)+ CC S |
  // "he that laughs last laughs best"
  SBAR COMMA plainS |
  // "yesterday, he died"
  TMOD COMMA plainS |
  // "yesterday he died"
  TMOD plainS;

SINV ->
  (verbmod)* VP NP VP;

SBARQ ->
  // "which dog bit me?"
  WHNP SQ |
  // "through which door did you go?"
  WHPP SQ |
  // "when did you eat?"
  WHADVP SQ;

SBAR ->
  // "[the dog] that is hungry"
  WHNP S |
  // "if the dog bites the woman"
  IN S;

SQ ->
  // "go home"
  VP |
  // "must (not) the werewolf (by the light of the moon) drink blood"
  MD (verbmod)* NP (verbmod) VP |
  // "is (not) the werewolf (now) (in the cage) (alive) (with fury)"
  VB (verbmod) NP (verbmod) (ADJP) (verbmodFinal) |
  // "is (not) the werewolf (thirstily) drinking blood"
  VB (verbmod) NP (verbmod) VP |
  // "is (not) the werewolf (really) Dan"
  VB (verbmod) NP (verbmod) NP (verbmodFinal);

nounModifier :=
  // "red"
  JJ |
  // "eaten"
  VBN |
  // "elevator"
  NN;

npSimple :=
  // "(the) big elevator button ('s)"
  (DT) (nounModifier)* NN (POS) |
  // "me"
  PRP |
  // "mine"
  PRP_POS |
  // "my pig"
  PRP_POS NN;

npListElem :=
  NP COMMA;

NP ->
  // "the dog"
  npSimple |
  // "the dog's meaty bone"
  NP NP |
  // "green eggs and ham in a box with a fox"
  NP (PP)+ |
  // "the man who would be king"
  NP SBAR |
  // "big and strong blacksmith"
  ADJP NP |
  // "{the other one} ('s)"
  LCURLY NP RCURLY (POS) |
  // "((the other one)) ('s)"
  LPAREN NP RPAREN (POS) |
  // "Larry ((the big guy))"
  NP LPAREN NP RPAREN |
  // "(either) the fox or the hen"
  (DT) NP CC NP |
  // "(either) the fox, the hen or the pigeon"
  (DT) (npListElem)+ NP CC NP |
  // "(either) the fox, the hen, or the pigeon"
  (DT) npListElem (npListElem)+ CC NP;

VP ->
  // "must go to bed"
  MD (verbmod) VP |
  // "kill the thief"
  (verbmod) VB (ADVP) (NP) (verbmodFinal) |
  // "give the thief a pickle"
  (verbmod) VB NP NP (verbmodFinal) |
  // "roll the blind up"
  (verbmod) VB NP (verbmod) PRT (verbmodFinal) |
  // "is red"
  (verbmod) VB (verbmod) ADJP |
  // "is going to the store"
  (verbmod) VB (verbmod) VP |
  // "arrive yesterday"
  (verbmod) VB (verbmod) TMOD |
  // "roll up the blind"
  (verbmod) VB (verbmod) PRT NP (verbmodFinal) |
  // "turning red"
  VBG ADJP |
  // "becoming (king)"
  (verbmod) VBG (NP) |
  // "eaten"
  VBN;

adjSimple :=
  // "running"
  VBG |
  // "eaten"
  VBN |
  // "red"
  JJ |
  // "red with shame"
  JJ PP;

adjListElem :=
  adjSimple COMMA;

ADJP ->
  // "red"
  adjSimple |
  // "(either) red or blue"
  (DT) adjSimple CC adjSimple |
  // "(either) red, blue or yellow"
  (DT) (adjListElem)+ adjSimple CC adjSimple |
  // "(either) red, blue, or yellow"
  (DT) adjListElem (adjListElem)+ CC adjSimple;

preposition :=
  IN |
  TO;

PP ->
  // (dangling)
  preposition |
  // "in the middle"
  preposition NP;

advSimple :=
  // "quite amazingly quickly"
  (RB)+ |
  // "quickly for a change"
  ADVP PP;

advListElem :=
  advSimple COMMA;

ADVP ->
  // "very quickly"
  advSimple |
  // "stealthily and very quickly"
  advSimple CC advSimple |
  // "stealthily, very quickly and quite obviously"
  (advListElem)+ advSimple CC advSimple |
  // "stealthily, very quickly, and quite obviously"
  advListElem (advListElem)+ CC advSimple;

TMOD ->
  // "yesterday evening"
  NP;

PRT ->
  RB;

WHNP ->
  // "which apple in the basket"
  WHNP PP |
  // "who"
  WP |
  // "how many red cats"
  WHADJP NP |
  // "which"
  WDT |
  // "which cat"
  WDT NP |
  // "whose"
  WP_POS |
  // "whose umbrella"
  WP_POS NP;

WHADVP ->
  // "why"
  WRB;

WHADJP ->
  // "how tall"
  WRB JJ;

WHPP ->
  // "by whose authority"
  preposition WHNP;
