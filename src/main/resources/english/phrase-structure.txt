// shlurd:  a limited understanding of small worlds
// Copyright 2017-2018 John V. Sichi
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

preposition :=
  IN |
  TO;

verbmod :=
  PP |
  ADVP;

// verb modifiers that can appear in final position (hence including
// dangling prepositions)
verbmodFinal :=
  PP |
  // DPP is a label we magically synthesize for PP's with a single child
  // (representing dangling prepositions)
  DPP |
  ADVP;

SBARQ ->
  // "which dog bit me?"
  WHNP SQ |
  // "through which door did you go?"
  WHPP SQ |
  // "when did you eat?"
  WHADVP SQ;

SBAR ->
  // "[the dog] that is hungry"
  WHNP S |
  // "if the dog bites the woman"
  IN S;

WHNP ->
  // "which apple in the basket"
  WHNP PP |
  // "who"
  WP |
  // "how many red cats"
  WHADJP NP |
  // "which"
  WDT |
  // "which cat"
  WDT NP |
  // "whose"
  WP_POS |
  // "whose umbrella"
  WP_POS NP;

WHADVP ->
  // "why"
  WRB;

WHADJP ->
  // "how tall"
  WRB JJ;

WHPP ->
  // "by whose authority"
  preposition WHNP;

SQ ->
  // "go home"
  VP |
  // "must (not) the werewolf (by the light of the moon) drink blood"
  MD (verbmod) NP (verbmod) VP |
  // "is (not) the werewolf (now) (in the cage) (alive) (with fury)"
  VB (verbmod) NP (verbmod) (ADJP) (verbmodFinal) |
  // "is (not) the werewolf (thirstily) drinking blood"
  VB (verbmod) NP (verbmod) VP |
  // "is (not) the werewolf (really) Dan"
  VB (verbmod) NP (verbmod) NP;

plainS :=
  VP |
  (verbmod) NP VP |
  verbmod verbmod NP VP;

S ->
  plainS |
  SBAR COMMA plainS |
  TMOD COMMA plainS |
  TMOD plainS;

SINV ->
  ADVP VB NP VP |
  PP VP NP VP;

VP ->
  MD (verbmod) VP |
  (verbmod) VB (ADVP) (NP) |
  (verbmod) VB verbmodFinal |
  VB NP NP |
  VB NP PRT (verbmodFinal) |
  VB NP verbmodFinal (verbmodFinal) |
  VB (verbmod) ADJP |
  VB verbmod verbmodFinal |
  VB (verbmod) VP |
  VB PP TMOD |
  VB PRT NP (verbmodFinal) |
  VBG ADJP |
  (verbmod) VBG (NP) |
  VBN;

adjSimple :=
  VBG |
  VBN |
  JJ |
  JJ PP;

adjListElem :=
  adjSimple COMMA;

ADJP ->
  adjSimple |
  (DT) adjSimple CC adjSimple |
  (DT) (adjListElem)+ adjSimple CC adjSimple |
  (DT) adjListElem (adjListElem)+ CC adjSimple;

nounModifier :=
  JJ |
  VBN |
  NN;

npSimple :=
  (DT) (nounModifier)* NN (POS) |
  PRP |
  PRP_POS |
  PRP_POS NN;

npListElem :=
  NP COMMA;

NP ->
  npSimple |
  NP NP |
  NP (PP)+ |
  NP SBAR |
  ADJP NP |
  LPAREN NP RPAREN (POS) |
  (DT) NP CC NP |
  (DT) (npListElem)+ NP CC NP |
  (DT) npListElem (npListElem)+ CC NP;

TMOD ->
  NP;

PP ->
  preposition |
  preposition NP;

ADVP ->
  RB |
  RB RB |
  ADVP PP |
  RB CC RB;

PRT ->
  RB;
